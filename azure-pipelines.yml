# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  buildConfiguration: 'Release'

steps:
#Esta primera tarea restaura los paquetes de depencias para todos los proyectos que tengamos en la carpeta
- task: DotNetCoreCLI@2
  displayName: 'Restaurar con Nuget' #el título de la tarea que queremos que se muestre en pantalla
  inputs:
    command: restore
    projects: '**/*.csproj'

#Hacemos el build de todos los proyectos en la carpeta
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

#Podemos instalar cosas adicionales:
#- task: DotNetCoreCLI@2
#  displayName: 'Instalando dotnetsay'
#  inputs:
#    command: custom
#    projects: '**/*.csproj'
#    custom: tool
#    arguments: 'install -g dotnetsay'

#Pasamos los tests si los hubiera:
- task: DotNetCoreCLI@2
  displayName: 'Pasando test'
  inputs:
    command: test
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

#también podemos hacerlo usando el comando dotnet test
#- script: dotnet test <test-project> --logger trx
#- task: PublishTestResults@2
#  condition: succeededOrFailed()
#  inputs:
#    testRunner: VSTest
#    testResultsFiles: '**/*.trx'

#Cobertura
- task: DotNetCoreCLI@2
  displayName: 'Recopilando Cobertura'
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

#Si hubiésemos usado el comando dotnet test tendríamos que usar para recuperar la cobertura lo siguiente:
#- script: dotnet test <test-project> --logger trx --collect "Code coverage"
#- task: PublishTestResults@2
#  inputs:
#    testRunner: VSTest
#    testResultsFiles: '**/*.trx'

#Empaquetando y entregando(podemos subir a Azure, publicar un paquete NuGet o hacer un zip)

#Publicar artefacto en Azure
- task: PublishBuildArtifacts@1

#Publicar paquete en NuGet
#- script: dotnet pack /p:PackageVersion=$(version) # define version variable elsewhere in your pipeline
#- task: NuGetCommand@2
#  inputs:
#    command: push  
#    nuGetFeedType: external
#    publishFeedCredentials: '<Name of the NuGet service connection>'
#    versioningScheme: byEnvVar
#    versionEnvVar: version
    
#Empaquetar en un zip
#- task: DotNetCoreCLI@2
#  inputs:
#    command: publish
#    publishWebProjects: True
#    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#    zipAfterPublish: True